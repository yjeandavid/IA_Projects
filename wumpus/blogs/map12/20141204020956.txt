My curNode: (1;1) hasMoo 
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (2;1) hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (3;1) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
I turn right.
My curNode: (3;1) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
I turn right.
My curNode: (3;1) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (2;1) hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn left.
My curNode: (2;1) hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (2;1) hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
I turn right.
My curNode: (2;1) hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
I turn right.
My curNode: (2;1) hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (2;2) hasBreeze  hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn right.
My curNode: (2;2) hasBreeze  hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn right.
My curNode: (2;2) hasBreeze  hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (2;1) hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
I turn right.
My curNode: (2;1) hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (1;1) hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (1;1) hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn left.
My curNode: (1;1) hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (1;1) hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
I turn right.
My curNode: (1;1) hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
I turn right.
My curNode: (1;1) hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (1;2) hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (1;3) hasBreeze  hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (1;4)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (1;4)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
I turn left.
My curNode: (1;4)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (1;4)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: E
I turn right.
My curNode: (1;4)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: E
I turn right.
My curNode: (1;4)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (2;4) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
I turn left.
My curNode: (2;4) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (2;4) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
goDirection is IDLE. I go home
My direction is: W
I turn left.
My curNode: (2;4) hasBreeze 
Cannot deduce Supmuw's friendliness.
goDirection is IDLE. I go home
My direction is: W
New and last directions equals. I go forward.
My curNode: (1;4)
Cannot deduce Supmuw's friendliness.
goDirection is IDLE. I go home
My direction is: S
I turn left.
My curNode: (1;4)
Cannot deduce Supmuw's friendliness.
goDirection is IDLE. I go home
My direction is: S
New and last directions equals. I go forward.
My curNode: (1;3) hasBreeze  hasMoo 
Cannot deduce Supmuw's friendliness.
goDirection is IDLE. I go home
My direction is: S
New and last directions equals. I go forward.
My curNode: (1;2) hasMoo 
Cannot deduce Supmuw's friendliness.
goDirection is IDLE. I go home
My direction is: S
New and last directions equals. I go forward.
My curNode: (1;1) hasMoo 
Cannot deduce Supmuw's friendliness.
I wants to leave and I am at entrance, climb out!
My curNode: (1;1) hasMoo 
Cannot deduce Supmuw's friendliness.
I wants to leave and I am at entrance, climb out!
